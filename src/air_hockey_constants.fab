// air_hockey_constants.fab â€” single source of constants for the game
// Author: Brandon Thacker
// License: MIT

// ============================================================================
// CONSTANTS
// ============================================================================

// ============================================================================
// TIMING & FRAME RATE
// ============================================================================
ct U ONE_SECOND_FRAMES = 60              // 60 fps
ct U THREE_SECONDS_FRAMES = 180          // 3 seconds at 60 fps
ct U TWO_SECONDS_FRAMES = 120            // 2 seconds
ct U FADE_PERIOD = 8                     // visual effects timing
ct U IDLE_SECONDS_BEFORE_ATTRACT = 15  // if on original menu, and idle, attract

// ============================================================================
// CORE GAME CONFIGURATION
// ============================================================================
ct U SCORE_TO_WIN = 7                    // standard air hockey rules
ct U STUCK_PUCK_HIT_MAX = 25             // if hits occur in quick succession, puck is stuck
ct U STUCK_PUCK_HIT_DISTANCE = 10

// ============================================================================
// PHYSICS & SIMULATION
// ============================================================================
ct SF FRICTION = 0.99                    // higher = less friction (simulate ice)
ct U PHYSICS_TICKS = 5                   // physics updates per frame (prevents tunneling)
ct U FRICTION_APPLY_TICKS = 2            // apply friction every N ticks

// ============================================================================
// MOVEMENT & COLLISION SYSTEM
// ============================================================================
// Movement flags (bitmask) - used by "moving" flag in PhysicsObject struct
ct U MOVING_LEFT = 1 << 0
ct U MOVING_RIGHT = 1 << 1
ct U MOVING_UP = 1 << 2
ct U MOVING_DOWN = 1 << 3
ct U MOVING_UP_CENTER = 1 << 4
ct U MOVING_DOWN_CENTER = 1 << 5
ct U BOOSTING = 1 << 6

// ============================================================================
// GAME OBJECT PROPERTIES
// ============================================================================
ct Int PUCK_RADIUS = 4
ct Int PUCK_DIAMETER = PUCK_RADIUS * 2
ct Int MALLET_RADIUS = 7
ct Int MALLET_DIAMETER = MALLET_RADIUS * 2
ct Int COLLISION_THRESHOLD = PUCK_DIAMETER * (MALLET_DIAMETER - 4) // tuned for feel
ct UF MALLET_SPEED_NORMAL = 0.5
ct UF MALLET_SPEED_BOOST = 1.0
ct U MALLET_COOLDOWN_TIMER = 10          // frames, gives chunky feel
ct Vector2SF VEL_ZERO = Vector2SF(0, 0)

// ============================================================================
// RINK / BOUNDARIES
// ============================================================================
ct RinkDimensions RINK_DIMENSIONS = RinkDimensions(
    72,   // left_x
    184,  // right_x
    24,   // top_y
    216,  // bottom_y
    107,  // left_net_x (tuned)
    149,  // right_net_x (tuned)
    120,  // center_y
    128,  // center_x
    116,  // center_y_p2_collision_check
    124   // center_y_p1_collision_check
)

ct LogoRinkBounds logo_rink_bounds = LogoRinkBounds(74, 110, 34, 48)

// Goal sprite positions (sprites used so puck can pass under when scoring)
ct Vector2U TOP_NET_POS = Vector2U(128, 15)   // player 2 goal (top)
ct Vector2U BOT_NET_POS = Vector2U(128, 223)  // player 1 goal (bottom)

// ============================================================================
// PLAYER POSITIONS
// ============================================================================
ct Vector2UF MALLET_P1_START = Vector2UF(128, 188)   // player 1 (bottom)
ct Vector2UF MALLET_P2_START = Vector2UF(128, 52)    // player 2 (top)
ct Vector2UF PUCK_START_P1 = Vector2UF(128, 160)     // puck start when player 1 serves
ct Vector2UF PUCK_START_P2 = Vector2UF(128, 80)      // puck start when player 2 serves

// ============================================================================
// SPACE THEME BACKGROUND EFFECTS
// ============================================================================
ct Vector2SF FAR_STAR_VEL = Vector2SF(0.20, 0.20)
ct Vector2SF CLOSE_STAR_VEL = Vector2SF(0.50, 0.50)

ct Vector2UF[16] FAR_STAR_POSITIONS = Vector2UF[16](
    Vector2UF(50, 30),
    Vector2UF(120, 80),
    Vector2UF(200, 40),
    Vector2UF(80, 150),
    Vector2UF(180, 180),
    Vector2UF(30, 200),
    Vector2UF(220, 120),
    Vector2UF(150, 20),
    Vector2UF(60, 100),
    Vector2UF(140, 160),
    Vector2UF(25, 60),
    Vector2UF(190, 90),
    Vector2UF(110, 210),
    Vector2UF(230, 30),
    Vector2UF(70, 120),
    Vector2UF(170, 50)
)

ct Vector2UF[16] CLOSE_STAR_POSITIONS = Vector2UF[16](
    Vector2UF(100, 50),
    Vector2UF(160, 100),
    Vector2UF(40, 160),
    Vector2UF(210, 60),
    Vector2UF(70, 200),
    Vector2UF(190, 180),
    Vector2UF(20, 100),
    Vector2UF(240, 140),
    Vector2UF(90, 80),
    Vector2UF(130, 140),
    Vector2UF(10, 180),
    Vector2UF(200, 20),
    Vector2UF(50, 220),
    Vector2UF(180, 200),
    Vector2UF(30, 40),
    Vector2UF(220, 160)
)

// ============================================================================
// AI SYSTEM
// ============================================================================
ct U AI_HIT_THRESHOLD = 5
ct U AI_BACKOFF_DURATION = 30
ct U AI_PREDICTION_FRAMES = 8
ct U AI_CLOSE_DISTANCE_THRESHOLD = 40
ct U AI_MIN_Y = RINK_DIMENSIONS.top_y + 3      // sprites are slightly offset
ct U AI_MAX_Y = RINK_DIMENSIONS.bottom_y - 4

// ============================================================================
// USER INTERFACE ELEMENTS
// ============================================================================
ct Vector2U SCORE_1_POS = Vector2U(54, 131)          // player 1 score position
ct Vector2U SCORE_2_POS = Vector2U(54, 101)          // player 2 score position
ct Vector2U SCORE_TO_WIN_POS = Vector2U(54, 116)     // score-to-win display
ct U NUMBER_SPRITES_START = $E0

ct Vector2U NOTIFY_SPRITE_POS = Vector2U(128, 150)   // pause/notify indicator position

// ============================================================================
// MENU SYSTEM
// ============================================================================
ct U MENU_STATE_TYPE = 0
ct U MENU_STATE_THEME = 1
ct U MENU_STATE_COLOR = 2
ct U MENU_STATE_GO_TO_GAME = 3
ct U MENU_MIN = 0

// Theme constants
ct U THEME_ARCADE = 0
ct U THEME_SPACE = 1
ct U THEME_RETRO = 2

// Menu line start addresses (we write one line at a time)
ct UU[8] MENU_LINE_ADDRESSES = UU[8](
    $21CC,  // line 1
    $21EC,  // line 2
    $220C,  // line 3
    $222C,  // line 4
    $224C,  // line 5
    $226C,  // line 6
    $228C,  // line 7
    $22AC   // line 8
)

ct CCC/menu_data[3] MENU_LINE_DATA = CCC/menu_data[3](
    @PLAYER_SELECT_TILES,
    @THEME_SELECT_TILES,
    @COLOR_SELECT_TILES
)

// Menu position arrays
ct U[2] MENU_X_POSITIONS = U[2](86, 170)
ct U[2] MENU_Y_POSITIONS_2 = U[2](138,154)
ct U[3] MENU_Y_POSITIONS_3 = U[3](138, 154, 170)
ct U[6] MENU_Y_POSITIONS_6 = U[6](130, 138, 146, 154, 162, 170)

// ============================================================================
// PALETTES
// ============================================================================
// Mallet color palettes (6 players, 3 colors each)
ct U[21] COLOR_PALETTES = U[21](
    $16, $05, $07,  // MALLET_RED_PALETTE
    $12, $11, $01,  // MALLET_BLUE_PALETTE
    $2A, $19, $0A,  // MALLET_GREEN_PALETTE
    $13, $04, $03,  // MALLET_PURPLE_PALETTE
    $27, $16, $16,  // MALLET_ORANGE_PALETTE
    $23, $24, $25,  // MALLET_PINK_PALETTE
    $2D, $00, $30   // REPLAY_GRAYSCALE_PALETTE
)

// Emphasis bits (can be cycled for flashing effects)
ct U[3] EMPHASIS_BITS = U[3](
    PPUMASK_EMPHASIZE_R,
    PPUMASK_EMPHASIZE_G,
    PPUMASK_EMPHASIZE_B
)

// ============================================================================
// GAME STATES AND PHYSICS OBJECT INDEXES
// ============================================================================
ct U PLAYER_1 = 0
ct U PLAYER_2 = 1
ct U PUCK = 2
ct U NONE = 255
